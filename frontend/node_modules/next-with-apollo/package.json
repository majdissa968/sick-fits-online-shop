{
  "_args": [
    [
      {
        "raw": "next-with-apollo@^3.1.3",
        "scope": null,
        "escapedName": "next-with-apollo",
        "name": "next-with-apollo",
        "rawSpec": "^3.1.3",
        "spec": ">=3.1.3 <4.0.0",
        "type": "range"
      },
      "/home/majd/Development/wes bos courses/Sick-fits-New/Advanced-React-master/sick-fits/frontend"
    ]
  ],
  "_from": "next-with-apollo@^3.1.3",
  "_hasShrinkwrap": false,
  "_id": "next-with-apollo@3.4.0",
  "_location": "/next-with-apollo",
  "_nodeVersion": "10.7.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/next-with-apollo_3.4.0_1552095534395_0.23710980268508974"
  },
  "_npmUser": {
    "name": "lfades",
    "email": "luisito453@gmail.com"
  },
  "_npmVersion": "6.1.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "next-with-apollo@^3.1.3",
    "scope": null,
    "escapedName": "next-with-apollo",
    "name": "next-with-apollo",
    "rawSpec": "^3.1.3",
    "spec": ">=3.1.3 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/next-with-apollo/-/next-with-apollo-3.4.0.tgz",
  "_shasum": "24dd9a86938805f168b2ea521d745900d3e52ace",
  "_shrinkwrap": null,
  "_spec": "next-with-apollo@^3.1.3",
  "_where": "/home/majd/Development/wes bos courses/Sick-fits-New/Advanced-React-master/sick-fits/frontend",
  "author": {
    "name": "lfades"
  },
  "bugs": {
    "url": "https://github.com/lfades/next-with-apollo/issues"
  },
  "dependencies": {
    "isomorphic-unfetch": "^3.0.0"
  },
  "description": "Apollo HOC for Next.js",
  "devDependencies": {
    "@types/graphql": "14.0.7",
    "@types/jest": "^24.0.11",
    "@types/next": "^8.0.1",
    "@types/node": "^11.11.0",
    "@types/prop-types": "^15.7.0",
    "@types/react": "^16.8.7",
    "@types/react-dom": "^16.8.2",
    "apollo-client": "^2.5.1",
    "graphql": "14.1.1",
    "jest": "^24.3.1",
    "next": "^8.0.3",
    "prettier": "^1.16.4",
    "prop-types": "^15.7.2",
    "react": "^16.8.4",
    "react-apollo": "^2.5.2",
    "react-dom": "^16.8.4",
    "ts-jest": "^24.0.0",
    "tslint": "^5.13.1",
    "tslint-config-prettier": "^1.18.0",
    "tslint-eslint-rules": "^5.4.0",
    "tslint-plugin-prettier": "^2.0.1",
    "typescript": "^3.3.3333"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-OwKQ65TbsUkdCKnYqMrucU1lJaN309UUjjXflREEJYugkA0HiuuIjWlxgBEpg16JdhZzaIih0pMdN9U1aPQ2VQ==",
    "shasum": "24dd9a86938805f168b2ea521d745900d3e52ace",
    "tarball": "https://registry.npmjs.org/next-with-apollo/-/next-with-apollo-3.4.0.tgz",
    "fileCount": 35,
    "unpackedSize": 53270,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcgxkvCRA9TVsSAnZWagAAi+4P+gJsqU3KFSCMUvw+oCNK\nVdBPIu3a5E7q3KFxrZ9/Fktox+PypekwPsPWSCdygj8DOfMdTLjJrpqZvA7A\n1gBoZQ3gO5dcu+1SfL0uV2WHCedminJ5pHTxWmatu/L3u/O307boXc9U4YVe\n6R5HFhpxvc2EOkkYvkbUqWHv+ahTr0lZbxMYyvcMz679v6EARmk1DuPkrnq7\nn0WI1BvmvwH2+G/2idFdSTsLE2n5EBz5QUYQJ1ViGs/+Nn9YKKSHXxSD+vf8\n8bPV/czKxSxgkrOlwFRbPMkRGuefoS89PF2oVwM/KedrPUj5YEFCG9jAmzMn\nmQrq8eGEGljrkI4G1G2o/JPacGAIaJGL20APp9EYfjcBX41W/G+7etmOfuJj\nHtZSAgen9SIVKSeULxrK8r79u1VToA68kXURzrWGoL8Zd1UwtxQxPGoUJBjk\nPmWGeX7FRvvODOYpKVlVOqpzOmt6fFfiqIOVctkhAvKRg/7bmmTvPSLqlpeR\n3wl7yLzzmUVPdXIimsePXqkL8ECwQZVZrwo3xHEnPZZkf2ZTm6kGdKUYne0V\nYv6knU3RCFkIWWuAuNJ+PjhjpCUPl2FrO8D9NPwwQSw3FQZq1wHxf+7earC4\n/Bm7Zgu/rcRC6Wo3L6jtH1YU5KKZR1ehUuZwa+CGad8wrhwpsjUD2VteSFIc\nDWcN\r\n=Vujp\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "7580d168fe0c1178aa03d43998431d852b35cc31",
  "homepage": "https://github.com/lfades/next-with-apollo#readme",
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "lfades",
      "email": "luisito453@gmail.com"
    }
  ],
  "name": "next-with-apollo",
  "optionalDependencies": {},
  "peerDependencies": {
    "next": "^6.0.0 || ^7.0.0 || ^8.0.0",
    "prop-types": "^15.6.2",
    "react": "^15.0.0 || ^16.0.0",
    "react-apollo": "^2.2.4",
    "react-dom": "^15.0.0 || ^16.0.0"
  },
  "prettier": {
    "singleQuote": true
  },
  "readme": "# next-with-apollo\n\nApollo HOC for Next.js, this docs are for Next > 6, for Next < 5  go [here](./README_v1.md) and use the version 1.0\n\n## How to use\n\nInstall the package with npm\n\n```sh\nnpm install next-with-apollo\n```\n\nor with yarn\n\n```sh\nyarn add next-with-apollo\n```\n\nCreate the HOC using a basic setup and [apollo-boost](https://github.com/apollographql/apollo-client/tree/master/packages/apollo-boost)\n\n> Note: [apollo-boost](https://github.com/apollographql/apollo-client/tree/master/packages/apollo-boost) is used in this example because is the fastest way to create an `ApolloClient`, but is not required.\n>\n> Previously this package had some configs to create an `ApolloClient`, those were removed but you can see an example of how to create the same `ApolloClient` by yourself [here](https://github.com/lfades/next-with-apollo/issues/13#issuecomment-390289449).\n```js\n// lib/withApollo.js\nimport withApollo from 'next-with-apollo'\nimport ApolloClient, { InMemoryCache }  from 'apollo-boost'\nimport { GRAPHQL_URL } from '../configs'\n\nexport default withApollo(({ ctx, headers, initialState }) => (\n  new ApolloClient({\n    uri: GRAPHQL_URL,\n    cache: new InMemoryCache().restore(initialState || {})\n  })\n))\n```\n\n> `withApollo` accepts a function that receives `{ ctx, headers }` or `{ initialState }` and returns an `ApolloClient`\n\nWrap Next's `App` in `pages/_app.js`\n\n```js\nimport App, { Container } from 'next/app'\nimport { ApolloProvider } from 'react-apollo'\nimport withApollo from '../lib/withApollo'\n\nclass MyApp extends App {\n  render() {\n    const { Component, pageProps, apollo } = this.props;\n\n    return (\n      <Container>\n        <ApolloProvider client={apollo}>\n          <Component {...pageProps} />\n        </ApolloProvider>\n      </Container>\n    );\n  }\n}\n\nexport default withApollo(MyApp)\n```\n\nNow every page in `pages/` can use anything from `react-apollo`!. Pages will have access to the `ApolloClient` too: `getInitialProps({ apolloClient })`\n\n**withApollo** can also receive some options as second parameter:\n\n| Key | Type | Default | Note |\n| --- | ---- | ------- | ---- |\n| `getDataFromTree` |  `string` | `always` | Should the apollo store be hydrated before the first render ?, allowed values are `always`, `never` or `ssr` (don't hydrate on client side navigation)\n\nUsage example:\n\n```js\nexport default withApollo(\n  () => new ApolloClient({ uri: GRAPHQL_URL }),\n  {\n    getDataFromTree: 'always'\n  }\n)\n```\n\n## How it works\n\n`next-with-apollo` will create a Higher-Order Component (HOC) with your configuration that can be used in `pages/_app` to wrap an `ApolloClient` to any Next page, it will also fetch your queries before the first page load to [hydrate the store](https://dev-blog.apollodata.com/how-server-side-rendering-works-with-react-apollo-20f31b0c7348).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/lfades/next-with-apollo.git"
  },
  "scripts": {
    "build": "npm run build-ts",
    "build-ts": "tsc",
    "fix": "tslint -p tsconfig.json --fix",
    "jest": "jest",
    "prepublishOnly": "npm run build && npm test",
    "test": "npm run tslint && jest --coverage",
    "tslint": "tslint -c tslint.json -p tsconfig.json -t codeFrame",
    "watch": "tsc -w"
  },
  "types": "lib/index.d.ts",
  "version": "3.4.0"
}
